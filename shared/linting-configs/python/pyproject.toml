[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pa-qa-python-project"
version = "1.0.0"
description = "PA-QA Python project with comprehensive code quality setup"
authors = [
    {name = "Project Assistant QA Team", email = "qa@projectassistant.ai"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Framework :: Django",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.0.292",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
fastapi = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "httpx>=0.24.0",
    "pytest-httpx>=0.21.0",
]
django = [
    "django>=4.2.0",
    "djangorestframework>=3.14.0",
    "django-extensions>=3.2.0",
    "factory-boy>=3.3.0",
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-dir]
"" = "src"

# Ruff Configuration
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
    "S",   # flake8-bandit
    "T20", # flake8-print
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "FBT", # flake8-boolean-trap
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
]
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function calls in argument defaults
    "C901",   # Too complex (will be handled by pylint)
    "S104",   # Possible binding to all interfaces
    "S602",   # subprocess call with shell=True
    "S603",   # subprocess call without shell=True
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "TD002",   # Missing author in TODO
    "TD003",   # Missing issue link in TODO
    "FIX002",  # Line contains TODO
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
    "manage.py",
    "settings.py",
    "conftest.py",
]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and have more flexible imports
"tests/**/*" = ["PLR2004", "S101", "TID252", "SLF001"]
"test_*.py" = ["PLR2004", "S101", "TID252", "SLF001"]
"**/test_*.py" = ["PLR2004", "S101", "TID252", "SLF001"]
# FastAPI specific ignores
"**/api/**/*" = ["B008"]  # FastAPI dependencies in defaults
"**/routers/**/*" = ["B008"]
"**/endpoints/**/*" = ["B008"]
# Django specific ignores
"**/models.py" = ["A003"]  # Django model fields can shadow builtins
"**/admin.py" = ["RUF012"]  # Django admin configuration
"**/urls.py" = ["RUF005"]   # Django URL patterns
"**/views.py" = ["PLR0913"] # Django views can have many arguments
# Settings files
"**/settings/**/*" = ["S105", "S106", "S107"]  # Hardcoded passwords
"**/config/**/*" = ["S105", "S106", "S107"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["app", "src", "tests"]
known-third-party = ["fastapi", "django", "pydantic", "sqlalchemy"]
force-single-line = false
force-sort-within-sections = true
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# Black Configuration
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort Configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app", "src", "tests"]
known_third_party = ["fastapi", "django", "pydantic", "sqlalchemy"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_grid_wrap = 0
combine_as_imports = true
include_trailing_comma = true
force_sort_within_sections = true
skip_glob = ["**/migrations/*", "**/venv/*", "**/node_modules/*"]

# Coverage Configuration
[tool.coverage.run]
source = ["src", "app"]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/tests/*",
    "*/test_*",
    "manage.py",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Pytest Configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=app", 
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-ra",
    "--tb=short",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "fastapi: marks tests specific to FastAPI",
    "django: marks tests specific to Django",
    "database: marks tests that require database",
    "external: marks tests that require external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
asyncio_mode = "auto"

# MyPy Configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
show_error_context = true
exclude = [
    "migrations/",
    "venv/",
    "build/",
    "dist/",
]

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest",
]
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "django.*",
    "rest_framework.*",
    "factory.*",
    "faker.*",
    "pytest_mock.*",
]
ignore_missing_imports = true

# Bandit Security Linting
[tool.bandit]
exclude_dirs = ["tests", "test_*", "*_test.py"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True in tests

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]