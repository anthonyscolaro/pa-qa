name: 'PA-QA Testing Showcase - CI/CD Pipeline'

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - e2e
          - accessibility
          - performance
          - visual

env:
  NODE_VERSION: '18'
  CACHE_PATHS: |
    ~/.npm
    node_modules
    ~/.cache/playwright
  ALLURE_RESULTS_PATH: 'allure-results'
  COVERAGE_THRESHOLD: 90

jobs:
  # Job 1: Setup and Lint
  setup:
    name: 'Setup & Code Quality'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Generate Cache Key'
        id: cache-key
        run: |
          echo "key=node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 'Cache Dependencies'
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: 'Install Dependencies'
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: 'Lint Code'
        run: |
          npm run lint
          npm run format:check

      - name: 'Type Check'
        run: npm run type-check

      - name: 'Build Application'
        run: npm run build
        env:
          NODE_ENV: production

      - name: 'Cache Build Artifacts'
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: build-${{ github.sha }}

  # Job 2: Unit & Integration Tests
  unit-tests:
    name: 'Unit & Integration Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == '' }}
    
    strategy:
      matrix:
        node-version: ['18', '20']
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js ${{ matrix.node-version }}'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 'Restore Dependencies Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Unit Tests with Coverage'
        run: npm run test:coverage
        env:
          CI: true
          NODE_ENV: test

      - name: 'Check Coverage Thresholds'
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "Coverage: ${COVERAGE}%"
          if (( $(echo "${COVERAGE} < ${COVERAGE_THRESHOLD}" | bc -l) )); then
            echo "❌ Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"
          fi

      - name: 'Upload Coverage Reports'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 'Generate Allure Results'
        if: always()
        run: |
          mkdir -p ${{ env.ALLURE_RESULTS_PATH }}
          cp -r allure-results/* ${{ env.ALLURE_RESULTS_PATH }}/ || true

      - name: 'Upload Unit Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            ${{ env.ALLURE_RESULTS_PATH }}/
            test-results/
          retention-days: 7

  # Job 3: E2E Tests
  e2e-tests:
    name: 'E2E Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e' || github.event.inputs.test_type == '' }}
    
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Restore Dependencies Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Restore Build Cache'
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: build-${{ github.sha }}

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 'Start Application'
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: 'Run E2E Tests (${{ matrix.browser }})'
        run: npx playwright test --project=${{ matrix.browser }} tests/e2e/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: 'Upload E2E Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            ${{ env.ALLURE_RESULTS_PATH }}/
          retention-days: 7

  # Job 4: Accessibility Tests
  accessibility-tests:
    name: 'Accessibility Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'accessibility' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Restore Dependencies Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Restore Build Cache'
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: build-${{ github.sha }}

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps chromium

      - name: 'Start Application'
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: 'Run Accessibility Tests'
        run: npx playwright test --project=accessibility tests/accessibility/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: 'Upload Accessibility Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-test-results
          path: |
            test-results/
            playwright-report/
            ${{ env.ALLURE_RESULTS_PATH }}/
          retention-days: 7

  # Job 5: Performance Tests
  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 25
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Restore Dependencies Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Restore Build Cache'
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: build-${{ github.sha }}

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps chromium

      - name: 'Start Application'
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: 'Run Performance Tests'
        run: npx playwright test --project=performance tests/performance/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: 'Upload Performance Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: |
            test-results/
            playwright-report/
            ${{ env.ALLURE_RESULTS_PATH }}/
          retention-days: 7

  # Job 6: Visual Regression Tests
  visual-tests:
    name: 'Visual Regression Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 20
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'visual' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Restore Dependencies Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Restore Build Cache'
        uses: actions/cache@v4
        with:
          path: |
            .next
            out
          key: build-${{ github.sha }}

      - name: 'Install Playwright Browsers'
        run: npx playwright install --with-deps chromium

      - name: 'Start Application'
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: 'Run Visual Regression Tests'
        run: npx playwright test --project=visual-desktop --project=visual-mobile tests/visual/
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: 'Upload Visual Test Results'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-test-results
          path: |
            test-results/
            playwright-report/
            ${{ env.ALLURE_RESULTS_PATH }}/
            tests/visual/*.png
          retention-days: 7

  # Job 7: Security Tests
  security-tests:
    name: 'Security Tests'
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15
    if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 'Restore Dependencies Cache'
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATHS }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: 'Install Dependencies'
        run: npm ci

      - name: 'Run Security Audit'
        run: |
          npm audit --audit-level=moderate
          npx audit-ci --moderate

      - name: 'Run Dependency Vulnerability Check'
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  # Job 8: Generate Allure Report
  allure-report:
    name: 'Generate Test Report'
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, accessibility-tests, performance-tests, visual-tests]
    if: always() && (needs.unit-tests.result != 'skipped' || needs.e2e-tests.result != 'skipped' || needs.accessibility-tests.result != 'skipped' || needs.performance-tests.result != 'skipped' || needs.visual-tests.result != 'skipped')
    timeout-minutes: 10
    
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Download All Test Results'
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: 'Setup Java for Allure'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: 'Setup Allure'
        run: |
          curl -sLO https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
          tar -zxf allure-2.24.1.tgz
          sudo mv allure-2.24.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/local/bin/allure

      - name: 'Combine Allure Results'
        run: |
          mkdir -p combined-allure-results
          find artifacts/ -name "allure-results" -type d -exec cp -r {}/* combined-allure-results/ \; || true
          find artifacts/ -name "*.json" -path "*/allure-results/*" -exec cp {} combined-allure-results/ \; || true

      - name: 'Generate Allure Report'
        run: |
          allure generate combined-allure-results --clean -o allure-report
          
      - name: 'Upload Allure Report'
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
          retention-days: 30

      - name: 'Deploy to GitHub Pages'
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./allure-report
          destination_dir: test-reports

  # Job 9: Notification and Cleanup
  notify:
    name: 'Notifications & Cleanup'
    runs-on: ubuntu-latest
    needs: [setup, unit-tests, e2e-tests, accessibility-tests, performance-tests, visual-tests, security-tests, allure-report]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 'Evaluate Results'
        id: results
        run: |
          OVERALL_STATUS="success"
          
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            echo "Unit tests failed"
          fi
          
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure" 
            echo "E2E tests failed"
          fi
          
          if [[ "${{ needs.accessibility-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            echo "Accessibility tests failed"
          fi
          
          if [[ "${{ needs.performance-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            echo "Performance tests failed"
          fi
          
          if [[ "${{ needs.visual-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            echo "Visual tests failed"
          fi
          
          if [[ "${{ needs.security-tests.result }}" == "failure" ]]; then
            OVERALL_STATUS="failure"
            echo "Security tests failed"
          fi
          
          echo "status=${OVERALL_STATUS}" >> $GITHUB_OUTPUT

      - name: 'Notify on Success'
        if: steps.results.outputs.status == 'success'
        run: |
          echo "✅ All PA-QA tests passed successfully!"
          echo "Test report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/"

      - name: 'Notify on Failure'
        if: steps.results.outputs.status == 'failure'
        run: |
          echo "❌ Some PA-QA tests failed. Check the logs for details."
          echo "Test report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/"
          exit 1

      # Optional: Send Slack notification (requires SLACK_WEBHOOK_URL secret)
      - name: 'Send Slack Notification'
        if: always() && github.event_name != 'pull_request'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.results.outputs.status }}
          channel: '#qa-testing'
          username: 'PA-QA Bot'
          icon_emoji: ':robot_face:'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            PA-QA Testing Showcase Pipeline ${{ steps.results.outputs.status == 'success' && '✅ PASSED' || '❌ FAILED' }}
            
            📊 Test Report: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/test-reports/
            🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}